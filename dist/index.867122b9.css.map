{"mappings":"AAAA;;;;;;AAQA;;;;;;;;;;;;;;;;;AAgBA;;;;AAIA;;;;;;;;;AAQE;;;;;AAIA;;;;AAGA;;;;;;AAIE;;;;;;AAMM;;;;AAMA;;;;AAMJ;;;;;;;AAQA;;;;;;;;;;;;AAUE;;;;AAGA;;;;;AAIE;;;;AAqBV;;;;;AAKA;;;;;;;ACnHA;;;;AAMA;;;;AASA;;;;;;;;;;;AAaA;;;;;;AAWA;;;;;AAQA;;;;;;;;AChDA;;;;;AAEA;EACE;;;;;;;EAOA;;;;;;;;;;;EAWA;;;;;;EAMA;;;;;;;;;;EAaA","sources":["src/styles/styles.scss","node_modules/splitting/dist/splitting.css","node_modules/splitting/dist/splitting-cells.css"],"sourcesContent":["*,\n*::before,\n*::after {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  --color-dark: #030303;\n  --color-gray: #85858d;\n  --color-white: #fff;\n  --color-text: #fcf0ec;\n  --color-green: #a0cf18;\n  --color-yellow: #ffc634;\n  --color-pink: #e271ad;\n  --color-dark: #030303;\n  font-size: 16px;\n  font-family: \"Space Grotesk\", sans-serif;\n  color: var(--color-text);\n  background-color: var(--color-dark);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\na {\n  text-decoration: none;\n}\n\n.header {\n  width: 100vw;\n  padding: 20px 25px;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    color: var(--color-text);\n    transition: transform 0.5s ease;\n  }\n  &__logo {\n    cursor: pointer;\n  }\n  &__wrapper {\n    display: flex;\n    align-items: center;\n    gap: 40px;\n    &--LN {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      a {\n        &:first-child {\n          &:hover,\n          &:focus-within {\n            color: var(--color-green);\n          }\n        }\n        &:last-child {\n          &:hover,\n          &:focus-within {\n            color: var(--color-yellow);\n          }\n        }\n      }\n      .dot {\n        width: 5px;\n        height: 5px;\n        background-color: var(--color-text);\n        border-radius: 50%;\n      }\n    }\n    &--HB {\n      .button-menu {\n        background: none;\n        cursor: pointer;\n        width: 54px;\n        height: 54px;\n        display: grid;\n        place-items: center;\n        border: 0.7px solid var(--color-text);\n        border-radius: 50%;\n        fill: var(--color-text);\n        svg {\n          transition: transform 0.5s ease;\n        }\n        &:focus-visible,\n        &:hover {\n          fill: var(--color-white);\n          border-color: var(--color-white);\n          svg {\n            transform: scale(1.1);\n          }\n        }\n      }\n    }\n  }\n}\n\n// main {\n//   display: grid;\n//   place-items: center;\n//   width: 100vw;\n//   height: 100vh;\n//   p {\n//     color: var(--color-text);\n//     font-weight: bold;\n//     font-size: 24px;\n//   }\n// }\n\n.splitting .char {\n  animation: slide-in 0.7s cubic-bezier(0.5, 0, 0.5, 1) both;\n  animation-delay: calc(60ms * var(--char-index));\n}\n\n@keyframes slide-in {\n  from {\n    transform: translateX(1em) scale(0.5);\n    opacity: 0;\n  }\n}\n","/* Recommended styles for Splitting */\n.splitting .word,\n.splitting .char {\n  display: inline-block;\n}\n\n/* Psuedo-element chars */\n.splitting .char {\n  position: relative;\n}\n\n/**\n * Populate the psuedo elements with the character to allow for expanded effects\n * Set to `display: none` by default; just add `display: block` when you want\n * to use the psuedo elements\n */\n.splitting .char::before,\n.splitting .char::after {\n  content: attr(data-char);\n  position: absolute;\n  top: 0;\n  left: 0;\n  visibility: hidden;\n  transition: inherit;\n  user-select: none;\n}\n\n/* Expanded CSS Variables */\n\n.splitting {\n  /* The center word index */\n  --word-center: calc((var(--word-total) - 1) / 2);\n\n  /* The center character index */\n  --char-center: calc((var(--char-total) - 1) / 2);\n\n  /* The center character index */\n  --line-center: calc((var(--line-total) - 1) / 2);\n}\n\n.splitting .word {\n  /* Pecent (0-1) of the word's position */\n  --word-percent: calc(var(--word-index) / var(--word-total));\n\n  /* Pecent (0-1) of the line's position */\n  --line-percent: calc(var(--line-index) / var(--line-total));\n}\n\n.splitting .char {\n  /* Percent (0-1) of the char's position */\n  --char-percent: calc(var(--char-index) / var(--char-total));\n\n  /* Offset from center, positive & negative */\n  --char-offset: calc(var(--char-index) - var(--char-center));\n\n  /* Absolute distance from center, only positive */\n  --distance: calc(\n     (var(--char-offset) * var(--char-offset)) / var(--char-center)\n  );\n\n  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */\n  --distance-sine: calc(var(--char-offset) / var(--char-center));\n\n  /* Distance from center where 1 is far left/far right, 0 is center */\n  --distance-percent: calc((var(--distance) / var(--char-center)));\n}\n",".splitting.cells img { width: 100%; display: block; }\n\n@supports ( display: grid ) {\n  .splitting.cells {\n    position: relative;\n    overflow: hidden;\n    background-size: cover;\n    visibility: hidden;\n  }\n\n  .splitting .cell-grid {\n    background: inherit;\n    position: absolute;\n    top: 0; \n    left: 0; \n    width: 100%; \n    height: 100%;\n    display: grid;\n    grid-template: repeat( var(--row-total), 1fr ) / repeat( var(--col-total), 1fr );\n  }\n\n  .splitting .cell {\n    background: inherit;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .splitting .cell-inner {\n    background: inherit;\n    position: absolute;\n    visibility: visible;\n    /* Size to fit the whole container size */\n    width: calc(100% * var(--col-total));\n    height: calc(100% * var(--row-total));\n    /* Position properly */\n    left: calc(-100% * var(--col-index));\n    top: calc(-100% * var(--row-index));\n  }\n\n  /* Helper variables for advanced effects */\n  .splitting .cell {\n    --center-x: calc((var(--col-total) - 1) / 2);\n    --center-y: calc((var(--row-total) - 1) / 2);\n\n    /* Offset from center, positive & negative */\n    --offset-x: calc(var(--col-index) - var(--center-x));\n    --offset-y: calc(var(--row-index) - var(--center-y));\n\n    /* Absolute distance from center, only positive */\n    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );\n\n    /* Absolute distance from center, only positive */\n    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );\n  }\n}\n\n"],"names":[],"version":3,"file":"index.867122b9.css.map","sourceRoot":"/__parcel_source_root/"}